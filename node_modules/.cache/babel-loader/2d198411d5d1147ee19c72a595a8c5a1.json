{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};\nconsole.log(requestRobots.length);","map":{"version":3,"sources":["/Users/jimcool/Desktop/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error","console","log","length"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,QAKQ,aALR;AAOA,OAAQ,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACtCC,EAAAA,IAAI,EAAEN,mBADgC;AAEtCO,EAAAA,OAAO,EAAEF;AAF6B,CAAX,CAAvB;AAKR,OAAO,MAAMG,aAAa,GAAKC,QAAD,IAAc;AACxCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAGL;AAAT,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAESG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEO;AAAzC,GAAD,CAFzB,EAGGC,KAHH,CAGUC,KAAK,IAAIP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,qBAAR;AAA+BI,IAAAA,OAAO,EAAES;AAAxC,GAAD,CAH3B;AAIH,CANM;AAOPC,OAAO,CAACC,GAAR,CAAYV,aAAa,CAACW,MAA1B","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED  \n } from './constants';\n\nexport  const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots =  (dispatch) => {\n    dispatch({ type:  REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}; \nconsole.log(requestRobots.length)"]},"metadata":{},"sourceType":"module"}